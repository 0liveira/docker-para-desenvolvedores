# Agradecimentos

**Breve...**

# Introdução #

Essa parte do livro é direcionado a todos que não tem conhecimento básico do Docker. Caso você já sabe usar, não precisa ler essa parte. Por outro lado, mesmo que você já saiba usar aqui teremos a explicação de muitos recursos que você usa e como eles funcionam de verdade.

Mesmo que você já use o Docker, ler essa parte do livro em algum momento da sua vida será importante para saber de forma mais consistente o que acontece com cada comando executado.


# O que é docker

De forma bem resumida podemos dizer que é uma plataforma aberta criada com objetivo de facilitar o desenvolvimento, implantação e execução de aplicações em ambientes isolados. Ela foi desenhada especialmente para disponibilizar sua aplicação da forma mais rápida possível.

![](images/docker.jpg)

Usando o Docker você pode gerenciar facilmente a infraestrutura da sua aplicação, ou seja, isso agilizará o processo de criação, manutenção e modificação do ambiente completo do seu serviço. O melhor é que tudo isso pode ser feito sem a necessidade de qualquer acesso privilegiado a sua infraestrutura corporativa. A equipe responsável pela aplicação poderá participar da especificação do ambiente, onde nesse caso eles devem fornecer um determinado arquivo com a descrição dessa solução, que conterá a informação de como a aplicação será disposta nesse espaço, em qual porta fornecerá seu serviço, quais dados de volumes externos serão requisitados e outras possíveis necessidades.

O docker disponibiliza uma nuvem publica para compartilhamento dos ambientes prontos, que podem ser utilizados para viabilizar customizações especificas para situações pessoais, ou seja, é possível obter um ambiente pronto do apache e configurar os módulos específicos que precisa dele e assim criar seu próprio ambiente customizado. Tudo isso com poucas linhas de configuração.

O Docker utiliza o modelo de container para “empacotar” sua aplicação, que após ser transformada em uma imagem docker, poderá ser reproduzida em qualquer porte de plataforma, ou seja, caso sua aplicação funcione sem falhas em seu notebook, ela funcionará também no servidor ou no mainframe.

Os containers são isolados a nível de disco, memória, processamento e rede. Essa separação permite uma grande flexibilidade, onde ambientes distintos podem coexistir no mesmo host, sem causar qualquer problema. Vale salientar que o overhead nesse processo é o mínimo necessário, pois cada container normalmente carrega apenas um processo, que é aquele responsável pela entrega do serviço desejado, em todo caso esse container também contém todos os arquivos necessários (configuração, biblioteca e afins) para sua execução completamente isolada.

Outra coisa interessante no docker é sua velocidade para viabilizar o ambiente desejado, pois como é basicamente o inicio de um processo e não um sistema operacional inteiro, o tempo de disponibilização é normalmente medido em segundos.

### Virtualização a nível do sistema operacional

O modelo de isolamento utilizado no Docker é a virtualização a nível do sistema operacional, que é um método de virtualização onde o kernel do sistema operacional permite que múltiplos processos sejam executados isoladamente no mesmo host. Esses processos isolados em execução são denominados no Docker de container.

![](images/docker2.png)

Para criar o isolamento necessário desse processo, o Docker usa a funcionalidade do Kernel denominada [namespaces](http://man7.org/linux/man-pages/man7/namespaces.7.html), que cria ambientes isolados entre containers, ou seja, os processos em execução de uma aplicação não terão acesso aos recursos de outras, a não ser que isso seja expressamente liberado na configuração de cada ambiente.

Para evitar a exaustão dos recursos da máquina por apenas um ambiente isolado, o Docker usa a funcionalidade [cgroups](https://en.wikipedia.org/wiki/Cgroups) do kernel, que é responsável por criar limites de uso do hardware a disposição. Com isso é possível coexistir no mesmo host diferentes containers, sem que um afete diretamente o outro por uso exagerado dos recursos compartilhados.


# Instalação

O Docker há algum tempo já deixou de ser apenas um software para virar um conjunto deles. Um ecosistema.

Nesse ecosistema temos os seguintes softwares:

* **Docker Engine:** É o software base de toda solução. É responsável tanto pela daemon que responsável pelo os containers como pelo cliente usado para enviar comandos pro daemon.
* **Docker Compose:** É o ferramenta responsável pela definição e execução de múltiplos containers com base em arquivo de definição.
* **Docker Machine:** é a ferramenta que possibilita criar e manter ambientes docker em máquinas virtuais, ambientes de nuvem e até mesmo em máquina física.

Não vamos citar o [Swarm](https://docs.docker.com/swarm/overview/) e outras ferramentas por não estarem alinhados com o objetivo desse livro, que é ser introdutório para os desenvolvedores.

## Instalando no GNU/Linux

Será explicado a instalação da forma mais genérica possível, ou seja, dessa forma você poderá instalar as ferramentas em qualquer distribuição GNU/Linux que esteja usando.

### Docker engine no GNU/Linux

Para instalar o docker engine é muito simples. Acesse o seu terminal preferido do GNU/Linux e se torne usuário root:

```
su - root
```
ou no caso da utilização de sudo

```
sudo su - root
```

Agora execute o comando abaixo:

```
wget -qO- https://get.docker.com/ | sh
```
Aconselho fortemente que leia o script que está sendo executado no seu sistema operacional. Acesse [esse link](https://get.docker.com/) e analise o código assim que tiver tempo para fazê-lo.

Esse procedimento demorará um pouco. Após terminar teste executando o comando abaixo:

```
docker run hello-world
```

#### Tratamento de possíveis problemas

Se o acesso a internet da sua máquina passar por um controle de tráfego (aquele que bloqueia o acesso a determinadas páginas) você poderá encontrar problemas no passo do **apt-key**, sendo assim caso passe por esse problema, execute o comando abaixo:

```
wget -qO- https://get.docker.com/gpg | sudo apt-key add -
```

### Docker compose no GNU/Linux

Acesse o seu terminal preferido do GNU/Linux e se torne usuário root:

```
su - root
```
ou no caso da utilização de sudo

```
sudo su - root
```

Agora execute o comando abaixo:

```
curl -L https://github.com/docker/compose/releases/download/1.6.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
```
Para testar execute o comando abaixo:

```
docker-compose version
```

#### Instalando Docker compose com pip

O pip é um gerenciador de pacotes Python, e como o docker-compose é escrito nessa linguagem, é possível instalá-lo desse jeito:

```
pip install docker-compose
```

### Docker machine no GNU/Linux

Para instalar o docker engine é muito simples. Acesse o seu terminal preferido do GNU/Linux e se torne usuário root:

```
su - root
```
ou no caso da utilização de sudo

```
sudo su - root
```

Agora execute o comando abaixo:

```
$ curl -L https://github.com/docker/machine/releases/download/v0.6.0/docker-machine-`uname -s`-`uname -m` > /usr/local/bin/docker-machine && \
chmod +x /usr/local/bin/docker-machine
```
Para testar execute o comando abaixo:

```
docker-machine version
```

# Comandos básicos

**Breve...**
